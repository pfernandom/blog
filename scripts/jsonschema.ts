import * as ts from 'typescript'
import fs from 'node:fs'
import * as prettier from 'prettier'

const file = ts.createSourceFile(
  'src/app/types/jsonschema.ts',
  '',
  ts.ScriptTarget.ESNext,
  false,
  ts.ScriptKind.TS
)

type LiteralValue = { type: 'string' | 'number' | 'boolean' }
type ArrayType = { type: 'array'; items: PropertyDefinition }
type UnionType = { type: undefined; oneOf: PropertyDefinition[] }
type ObjectType = {
  type: 'object'
  properties: { [key: string]: PropertyDefinition }
  required: string[]
}
type PropertyDefinition = ArrayType | LiteralValue | UnionType | ObjectType

type JSONSchema = ObjectType

const schema: JSONSchema = JSON.parse(fs.readFileSync('./schema.json', 'utf-8'))

const printer = ts.createPrinter({ newLine: ts.NewLineKind.LineFeed })

const requiredAttributes = new Set(schema.required)

function getType(type: PropertyDefinition): ts.TypeNode {
  //   const ident = ts.factory.createIdentifier(name)

  if (type.type == 'array') {
    return ts.factory.createArrayTypeNode(getType(type.items))
  } else if (type.type === 'object') {
    const props = Object.entries(type.properties).map(([name, prop]) => {
      return ts.factory.createPropertySignature(
        [],
        name,
        requiredAttributes.has(name)
          ? undefined
          : ts.factory.createToken(ts.SyntaxKind.QuestionToken),
        getType(prop)
      )
    })
    return ts.factory.createTypeLiteralNode(props)
  } else if (!type.type) {
    return ts.factory.createUnionTypeNode(
      type.oneOf.map((prop) => getType(prop))
    )
  } else {
    return ts.factory.createTypeReferenceNode(type.type)
  }

  throw new Error('Unsupported case: ' + JSON.stringify({ name, type }))
}

const typeDefinition = getType(schema)

// const result = printer.printNode(ts.EmitHint.Unspecified, typeDefinition, file)

// const stringTypeReference = ts.factory.createTypeReferenceNode('string')
const uuidDecl = ts.factory.createTypeAliasDeclaration(
  undefined, // decorators
  [ts.factory.createModifier(ts.SyntaxKind.ExportKeyword)], // modifiers
  ts.factory.createIdentifier('Post'), // name
  undefined, // type parameters
  typeDefinition // aliased type
)

// ts.factory.createVariableStatement(undefined, ts.factory.createVariableDeclarationList([ts.factory.createVariableDeclaration("")])

const result = printer.printNode(ts.EmitHint.Unspecified, uuidDecl, file)
console.log('Generating types from JSONSchema...')

fs.writeFileSync(
  file.fileName,
  prettier.format(
    `/**
     * Autogenerated by scripts/jsonschema.ts
     **/
    export const schema = ${JSON.stringify(schema)}\n\n${result}`,
    { parser: 'babel-ts' }
  )
)
